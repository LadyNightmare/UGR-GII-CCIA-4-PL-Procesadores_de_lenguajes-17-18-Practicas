//
// BABAD (Lenguaje C - Castellano - vector 1D y 2D - Funciones - Do-Until)
//

<Programa> ::= <Cabecera_programa> <bloque>

<bloque> ::= <Inicio_de_bloque> <Declar_de_variables_locales> <Declar_de_subprogs> <Sentencias> <Fin_de_bloque>

<Declar_de_subprogs> ::= <Declar_de_subprogs> <Declar_subprog>
    		|
<Declar_subprog> ::= <Cabecera_subprograma> <bloque>

<Declar_de_variables_locales> ::= <Marca_ini_declar_variables> <Variables_locales> <Marca_fin_declar_variables>
			|

<Cabecera_programa> ::= principal

<Inicio_de_bloque> ::= {

<Fin_de_bloque> ::= }

<Marca_ini_declar_variables> ::= ini_var_local

<Marca_fin_declar_variables> ::= fin_var_local

<Variables_locales> ::= <Variables_locales> <Cuerpo_declar_variables>
            | <Cuerpo_declar_variables>

<Cuerpo_declar_variables> ::= <tipo_basico> <lista_variables> ;

<Cabecera_subprograma> ::= <tipo_basico> <variable> ( <lista_parametros> )
    		| <tipo_basico> <variable> ( )

<Sentencias> ::= <Sentencias> <Sentencia>
            | <Sentencia>

<<<<<<< HEAD
<Sentencia> ::= <sentencia> <sentencia>
            | <bloque>
            | <sentencia_asignacion>
            | <sentencia_si>
            | <sentencia_mientras>
            | <sentencia_entrada>
            | <sentencia_salida>
            | <sentencia_devolver>
            | <sentencia_hacer_hasta>

<sentencia_asignacion> ::= <var_array> = <identificador> ;
            | <identificador> [ <expresion> ] ;
            | <identificador> [ <expresion> ] [ expresion ] ;

<sentencia_si> ::= si ( <expresion> ) <sentencia>
    		|  ( <expresion> ) <sentencia> else <bloque> ;
=======
<Sentencia> ::= <bloque>
                | <sentencia_asignacion>
                | <sentencia_si>
                | <sentencia_mientras>
                | <sentencia_entrada>
                | <sentencia_salida>
                | <sentencia_devolver>
                | <sentencia_hacer_hasta>

<sentencia_asignacion> ::= <var_array> = <expresion> ;

<sentencia_si> ::= si ( <expresion> ) <sentencia>
<<<<<<< HEAD:Practica1.bnf
        		|  ( <expresion> ) <sentencia> si_no <bloque> ;
>>>>>>> master
=======
        		|  ( <expresion> ) <sentencia> si_no <sentencia>
>>>>>>> master:Práctica 1/Practica1.bnf

<sentencia_hacer_hasta> ::= hacer <sentencia> hasta ( <expresion> )

<sentencia_mientras> ::= mientras ( <expresion> ) <sentencia>

<sentencia_entrada> ::= leer <lista_variables> ;

<sentencia_salida> ::= escribir <lista_expresiones_o_cadena> ;

<sentencia_devolver> ::= devolver <expresion> ;

<expresion> ::= ( <expresion> )
<<<<<<< HEAD
            | <op_unario> <expresion>
            | <expresion> <op_binario> <expresion>
            | <var_array>
            | <constante>
            | <funcion>
            | <variable>
=======
                | <op_unario> <expresion>
                | <expresion> <op_binario> <expresion>
                | <constante>
                | <funcion>
<<<<<<< HEAD:Practica1.bnf
                | <variable>
>>>>>>> master
=======
>>>>>>> master:Práctica 1/Practica1.bnf

<tipo_basico> ::= entero
	        | booleano
	        | caracter
	        | flotante

<lista_variables> ::= <lista_variables> , <variable>
	        | <variable>

<identificador> ::= "cadena que empieza por _ o una letra"

<variable> ::= <identificador>
            | <identificador> [ <const_entero_sin_signo> ]
            | <identificador> [ <const_entero_sin_signo> ] [ <const_entero_sin_signo> ]

<var_array> ::= <identificador>
                | <identificador> [ <expresion> ]
                | <identificador> [ <expresion>, <expresion> ]

<lista_parametros> ::= <lista_parametros> , <tipo_basico> <variable>
    		| <tipo_basico> <variable>

<lista_entero> ::= <lista_entero> , <const_entero>
            | <const_entero>

<lista_booleano> ::= <lista_booleano> , <const_booleano>
            | <const_booleano>

<lista_flotante> ::= <lista_flotante> , <const_flotante>
            | <const_flotante>

<lista_caracter> ::= <lista_caracter> , <const_caracter>
            | <const_caracter>

<lista_expresiones_o_cadena> ::= <lista_expresiones_o_cadena> , <expresion>
	        | <lista_expresiones_o_cadena> , <cadena>
	        | <expresion>
	        | <cadena>

<cadena> ::= "cualquier secuencia de caracteres"

<op_unario> ::= &
	        | +
	        | -
	        | ~
	        | !

<op_binario> ::= +
	        | -
	        | *
	        | /
	        | ==
	        | !=
	        | <=
	        | >=
	        | <
	        | >
	        | &&
	        | ||

<signo> ::= -
<<<<<<< HEAD:Practica1.bnf
            | +

<constante> ::= <const_entero>
	        | <const_matriz>
	        | <const_booleano>
	        | <const_flotante>
	        | <const_caracter>

<funcion> ::= <identificador> ( <lista_variables> ) ;
			| <identificador ( ) ;
=======
                | +
                |

<constante> ::= <const_entero>
                |<const_entero_sin_signo>
		        | <const_matriz>
		        | <const_booleano>
		        | <const_flotante>
		        | <const_flotante_sin_signo>
		        | <const_caracter>

<funcion> ::= <identificador> ( <lista_expresiones_o_cadena> ) ;
				| <identificador ( ) ;
>>>>>>> master:Práctica 1/Practica1.bnf

<vector> ::= <tipo_basico> <identificador> [ <const_entero_sin_signo> ] ;
			| <tipo_basico> <identificador> [ <const_entero_sin_signo> , <const_entero_sin_signo> ] ;

<const_entero_sin_signo> ::= <const_entero_sin_signo> [0-9]
            | [0-9]

<const_entero> ::= <signo> <const_entero_sin_signo>

<const_matriz> ::=  <matriz_entero>
            | <matriz_booleano>
            | <matriz_flotante>
            | <matriz_caracter>

<matriz_entero> ::=  { <lista_entero> }

<matriz_booleano> ::=  { <lista_booleano> }

<matriz_flotante> ::=  { <lista_flotante> }

<matriz_caracter ::=  { <lista_caracter> }

<const_booleano> ::= verdadero
			| falso

<const_flotante> ::= <const_entero> . <const_entero_sin_signo>

<const_flotante_sin_signo> ::= <const_entero_sin_signo> . <const_entero_sin_signo> //Se cree que no es necesario al tener const_entero -, +, o vacío

<const_caracter> ::= [a-z]
			| [A-Z]
